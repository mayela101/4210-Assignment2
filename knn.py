# -*- coding: utf-8 -*-
"""knn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vw8w4QRRCV-j2ih3e-sSJEZnDXWsmf7h
"""

#-------------------------------------------------------------------------
# AUTHOR: Mayela Ancheta
# FILENAME: knn.py
# SPECIFICATION: Perform Leave-One-Out Cross-Validation (LOO-CV) using 1NN on an email classification dataset
# FOR: CS 4210- Assignment #2
# TIME SPENT: 3 hours
#-------------------------------------------------------------------------*/
# IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH
# AS numpy OR pandas. You have to work here only with standard vectors and arrays.

#Importing some Python libraries
from sklearn.neighbors import KNeighborsClassifier
import csv

db = []

# Reading the data from csv file
with open('email_classification.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for i, row in enumerate(reader):
        if i > 0: #skipping the header
            db.append(row)

errors = 0

#Loop your data to allow each instance to be your test set for i in db:
n = len(db)



#Do not forget to remove the instance that will be used for testing in this iteration.
#For instance, Y = [1, 2, ,...].
#Convert each feature value to float to avoid warning messages
for i in range(n):
    X = []
    Y = []

    for j in range(n):
        if j != i:
            X.append([float(val) for val in db[j][:-1]])
            Y.append(1 if db[j][-1] == 'spam' else 0)

    testSample = [float(val) for val in db[i][:-1]]
    true_label = 1 if db[i][-1] == 'spam' else 0

    # Train 1NN classifier
    clf = KNeighborsClassifier(n_neighbors=1, p=2)
    clf.fit(X, Y)

    # Predict the class
    class_predicted = clf.predict([testSample])[0]

    #Compare the prediction with the true label of the test instance to start calculating the error rate
    if class_predicted != true_label:
        errors = errors +1;

# Print the error rate
error_rate = errors / n
print(f'Error Rate: {error_rate:.4f}')