# -*- coding: utf-8 -*-
"""naive_bayes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uBmeevYB8YrFfKvCcEN8viINctmMOQw9
"""

#-------------------------------------------------------------------------
# AUTHOR: Mayela Ancheta
# FILENAME: naive_bayes.py
# SPECIFICATION: Perform NaÃ¯ve Bayes classification on weather data
# FOR: CS 4210- Assignment #2
# TIME SPENT: 1 day
#-------------------------------------------------------------------------*/
# IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH
# AS numpy OR pandas. You have to work here only with standard dictionaries, lists, and arrays

#Importing some Python Libraries
from sklearn.naive_bayes import GaussianNB
import csv

def feature(value, mapping):
    return mapping[value]

outlook = {'Sunny': 1, 'Overcast': 2, 'Rain': 3}
temperature = {'Hot': 1, 'Mild': 2, 'Cool': 3}
humidity= {'High': 1, 'Normal': 2}
wind = {'Weak': 1, 'Strong': 2}
playtennis = {'Yes': 1, 'No': 2}

# Reading the training data
X = []
Y = []
with open('weather_training.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    next(reader)  #skipping header
    for row in reader:
        X.append([
            feature(row[1], outlook),
            feature(row[2], temperature),
            feature(row[3], humidity),
            feature(row[4], wind)
        ])
        Y.append(feature(row[5], playtennis))


clf = GaussianNB(var_smoothing=1e-9)
clf.fit(X, Y)

#Reading the test data
test_data = []
test_instances = []
with open('weather_test.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    next(reader)  # Skip header
    for row in reader:
        test_instances.append(row)
        test_data.append([
            feature(row[1], outlook),
            feature(row[2], temperature),
            feature(row[3], humidity),
            feature(row[4], wind)
        ])

#Printing the header of the solution
print("Day Outlook Temperature Humidity Wind PlayTennis Confidence")

#Use your test samples to make probabilistic predictions. For instance:
predictions = clf.predict(test_data)
probabilities = clf.predict_proba(test_data)

for i, (pred, prob) in enumerate(zip(predictions, probabilities)):
    confidence = max(prob)
    if confidence >= 0.75:
        print(f"{test_instances[i][0]} {test_instances[i][1]} {test_instances[i][2]} {test_instances[i][3]} {test_instances[i][4]} {'Yes' if pred == 1 else 'No'} {confidence:.2f}")