# -*- coding: utf-8 -*-
"""decision_tree_2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Idc_aDXAt834ooU1iQVGLOmcJoa2WK_8
"""

#-------------------------------------------------------------------------
# AUTHOR: Mayela Ancheta
# FILENAME: decision_tree_2.py
# SPECIFICATION: Train and test decision tree models on different datasets and evaluate performance
# FOR: CS 4210- Assignment #2
# TIME SPENT: 2 days
#-------------------------------------------------------------------------

#IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard
# dictionaries, lists, and arrays

# Importing some Python Libraries
from sklearn import tree
import csv

dataSets = ['contact_lens_training_1.csv', 'contact_lens_training_2.csv', 'contact_lens_training_3.csv']

def transform_features(row):
    age= {'Young': 1, 'Prepresbyopic': 2, 'Presbyopic': 3}
    spectacle = {'Myope': 1, 'Hypermetrope': 2}
    astigmatism= {'Yes': 1, 'No': 2}
    tear = {'Normal': 1, 'Reduced': 2}
    classMap = {'Yes': 1, 'No': 2}

    X = [
        age[row[0]],
        spectacle[row[1]],
        astigmatism[row[2]],
        tear[row[3]]
    ]
    Y = classMap[row[4]]

    return X, Y

for ds in dataSets:
    dbTraining = []
    X = []
    Y = []

    # Reading the training data from CSV file
    with open(ds, 'r') as csvfile:
        reader = csv.reader(csvfile)
        for i, row in enumerate(reader):
            if i > 0:  #skipping the header
                X_transformed, Y_transformed = transform_features(row)
                X.append(X_transformed)
                Y.append(Y_transformed)

    total = 0

    #Loop your training and test tasks 10 times here
    for i in range(10):
        clf = tree.DecisionTreeClassifier(criterion='entropy', max_depth=5)
        clf = clf.fit(X, Y)

        dbTest = []
        with open('contact_lens_test.csv', 'r') as csvfile:
            reader = csv.reader(csvfile)
            for i, row in enumerate(reader):
                if i > 0:  #skipping the header
                    dbTest.append(row)

        correct_predictions = 0
        total_predictions = len(dbTest)

        for data in dbTest:
            X_test, actual_class = transform_features(data)
            class_predicted = clf.predict([X_test])[0]

            if class_predicted == actual_class:
                correct_predictions += 1

        accuracy = correct_predictions / total_predictions
        total += accuracy

    # Calculate the average accuracy
    avg_accuracy = total / 10
    print(f"Final accuracy ({ds}) : {avg_accuracy:.2f}")